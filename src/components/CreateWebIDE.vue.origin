<!-- CreateWebIDE.vue -->

<script>
import axios from 'axios'
import { wettyBaseURL } from '../../config'

const wettyURL = `${wettyBaseURL}`

export default {
  props: {
    userName: {
      type: String,
      required: true,
    },
    userId: {
      type: String,
      required: true,
    },
  },
  data() {
    return {
      createWebIDEVisible: true,
      nameSpace: 'kube-pattern', // 네임스페이스
      serviceAccount: 'cluster-admin-sa', // 서비스 계정
      portList: [{ name: 'service', protocol: 'TCP', port: 8080, targetPort: 8080 }], // 포트 리스트
      infraSize: { cpu: '200m', memory: '512Mi', disk: '20Gi' }, // 인프라 크기
      replicas: 1, // 레플리카 수
    }
  },
  methods: {
    async submitCreateWebIDE() { // <-- Use async because axios is promise-based
      this.closePopup()
      const structuredData = {
        userName: this.userName,
        userId: this.userId,
        serviceAccountName: this.serviceAccount,
        portList: this.portList,
        infrastructureSize: this.infraSize,
        replicas: this.replicas,
      }

      const name = structuredData.userName
      const ns = this.nameSpace

      const ideConfigApiUrl = `${wettyURL}api/ideconfig/ide?namespace=${ns}&name=${name}`
      const vscodeRouteApiUrl = `${wettyURL}api/vscode/route/${name}`

      try {
        const ideConfigResponse = await axios.post(ideConfigApiUrl, structuredData, {
          headers: {
            'Content-Type': 'application/json',
          },
        })
        const portArray = this.portList.map(item => item.port)
        const vscodeRouteResponse = await axios.post(vscodeRouteApiUrl, portArray, {
          headers: {
            'Content-Type': 'application/json',
          },
        })

        const dataArray = [ideConfigResponse.data, vscodeRouteResponse.data]
        const resultPopup = window.open('', 'Result', 'width=600,height=900')
        resultPopup.document.write(`<pre>${JSON.stringify(dataArray, null, 2)}</pre>`)
        this.$emit('updateButtonDisabled', true)
      }
      catch (error) {
        alert(`Error: ${vscodeRouteApiUrl.toString()}${error.message}\n\nData:\n${JSON.stringify(structuredData)}`)
      }
      finally {
        this.closePopup()
      }
    },
    closePopup() {
      this.$emit('closePopup') // Wetty.vue로 이벤트 전송
    },
  },
}
</script>

<template>
  <div v-if="createWebIDEVisible" class="modal">
    <!-- Port List 박스 -->
    <div class="box">
      <h3>Port List</h3>
      <div v-for="(port, index) in portList" :key="index" class="port-item">
        <div class="input-group">
          <label class="input-label">이름</label>
          <input v-model="port.name" placeholder="이름 입력">
        </div>
        <div class="input-group">
          <label class="input-label">포트 번호</label>
          <input v-model="port.port" placeholder="포트 번호 입력" type="number" @input="port.targetPort = port.port">
        </div>
      </div>
      <button class="add-port-button" @click="() => portList.push({ name: 'svc', protocol: 'TCP', port: 8081, targetPort: 8081 })">
        포트 추가
      </button>
    </div>

    <!-- Infra Size 박스 -->
    <div class="box">
      <h3>Infra Size</h3>
      <div class="port-item">
        <div class="input-group">
          <label class="input-label">CPU</label>
          <input v-model="infraSize.cpu" placeholder="CPU 입력">
        </div>
        <div class="input-group">
          <label class="input-label">MEM</label>
          <input v-model="infraSize.memory" placeholder="메모리 입력">
        </div>
        <div class="input-group">
          <label class="input-label">DISK</label>
          <input v-model="infraSize.disk" placeholder="디스크 입력">
        </div>
      </div>
    </div>

    <!-- Service Account box -->
    <div class="box">
      <h3>ServiceAccount</h3>
      <div class="port-item">
        <div class="input-group">
          <label class="input-label">name</label>
          <input v-model="serviceAccount" placeholder="SA 입력">
        </div>
      </div>
    </div>
    <!-- naemspace box -->
    <div class="box">
      <h3>Namespace</h3>
      <div class="port-item">
        <div class="input-group">
          <label class="input-label">name</label>
          <input v-model="nameSpace" placeholder="Namespace 입력">
        </div>
      </div>
    </div>

    <!-- Replicas 박스 -->
    <div class="box">
      <h3>Replicas</h3>
      <div class="port-item">
        <div class="input-group">
          <label class="input-label">Replicas</label>
          <input v-model="replicas" placeholder="레플리카 수 입력" type="number">
        </div>
      </div>
    </div>

    <!-- 제출 버튼들의 컨테이너 -->
    <div class="button-container">
      <button @click="closePopup">
        닫기
      </button>
      <button @click="submitCreateWebIDE">
        확인
      </button>
    </div>
  </div>
</template>

<style>
/* ... 기존의 스타일 ... */
main {
  overflow-y: auto;
}
/* 박스 스타일 */
.box {
  border: 1px solid #ccc;
  padding: 10px;
  margin-bottom: 10px;
  background-color: #f5f5f5;
}

.port-item {
  display: flex;
  align-items: center;
  gap: 15px; /* 두 버튼 사이의 간격 */
}

.add-port-button {
  margin-top: 10px; /* 위쪽 마진 2px 설정 */
}

.port-item input {
  border: 1px solid #ccc;  /* 회색 테두리 추가 */
  padding: 8px 12px;  /* 텍스트와 테두리 사이의 간격을 위한 패딩 */
  border-radius: 4px;  /* 테두리의 모서리를 둥글게 */
  outline: none;  /* 선택 시 파란색 테두리 제거 */
  transition: border-color 0.3s;  /* 테두리 색상의 부드러운 전환 효과 */
}

.port-item input:focus {
  border-color: #007BFF;  /* 선택 시 테두리 색상 변경 */
}

/* 기본 버튼 스타일 */
button {
  border: 1px solid #ccc;  /* 회색 테두리 */
  padding: 8px 12px;  /* 내부 패딩 */
  border-radius: 4px;  /* 모서리 둥글게 */
  background-color: white;  /* 배경색 */
  cursor: pointer;  /* 마우스 오버 시 포인터 모양으로 */
  transition: transform 0.1s, box-shadow 0.1s;  /* 애니메이션 효과 */
  outline: none;  /* 선택 시 파란색 테두리 제거 */
}

/* 버튼 호버(마우스 오버) 시 스타일 */
button:hover {
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);  /* 그림자 효과 */
}

/* 버튼 누를 때(액티브) 스타일 */
button:active {
  transform: scale(0.97);  /* 버튼 크기를 약간 줄임 */
}

.button-container {
  display: flex;
  justify-content: flex-end; /* 오른쪽 정렬 */
  gap: 10px; /* 버튼 사이의 간격 */
  margin-top: 10px; /* 상단과의 간격, 필요에 따라 조정 가능 */
}

.input-group {
  display: flex;
  align-items: center;
  gap: 2px; /* 라벨과 입력 사이의 간격 */
}

.input-label {
  margin-right: 2px; /* 라벨과 입력 사이의 간격 */
  white-space: nowrap; /* 라벨 텍스트가 줄바꿈되지 않도록 설정 */
}
</style>
